const Joi = require('joi');

const configSchema = Joi.object().keys({
  NODE_ENV: Joi.string().valid('production', 'development', 'test').required(),
  // Define your configuration schema here...
  NODE_ENV: Joi.string().valid('production', 'development', 'test').required(),
  PUBLIC_URL: Joi.string().default(null),
  SYNC_MIDDLEWARE: Joi.boolean().default(false),
  SYNC_GENERATE_LOGIN: Joi.boolean().default(true),
  PORT: Joi.number().default(3000),
  GRAYLOG_NAME: Joi.string().default('local'),
  GRAYLOG_HOST: Joi.string().default(null),
  GRAYLOG_PORT: Joi.string().default(12201),
  REDIS_HOST: Joi.string().default('127.0.0.1'),
  REDIS_PORT: Joi.string().default(6379),
  REDIS_PASSWORD: Joi.string().default('master_password'),
  SYNC_URL: Joi.string().default('https://ott/api/OttProvider'),
  SYNC_PROVIDER_PULL_TIME: Joi.number().default(30),
  TAXJAR_API_TOKEN: Joi.string().default('e5437df7aef675ecb405bdfeeebdfb3f'),
  FRONT_URL: Joi.string().required().description('front url'),
  SMARTSTREET_SOURCE_URL: Joi.string()
    .required()
    .description('fsmartstreet validation source url')
    .default('http://localhost:5020'),
  MONGODB_URL: Joi.string().required().description('Mongo DB url'),
  FILE_STORAGE_PATH: Joi.string().required().description('File Storage full path'),
  STORAGE_ROOT_PATH: Joi.string().description('File Storage root path').default('./'),
  TEMPLATE_PATH: Joi.string().description('template_path').default('../../'),
  JWT_SECRET: Joi.string().required().description('JWT secret key'),
  JWT_ACCESS_EXPIRATION_MINUTES: Joi.number().default(1).description('minutes after which access tokens expire'),
  JWT_REFRESH_EXPIRATION_DAYS: Joi.number().default(30).description('days after which refresh tokens expire'),
  SMTP_FULL: Joi.string().description('nodemail connection string'),
  SMTP_HOST: Joi.string().description('server that will send the emails'),
  SMTP_PORT: Joi.number().description('port to connect to the email server'),
  SMTP_USERNAME: Joi.string().description('username for email server'),
  MAXMIND_DAILY_LIMIT: Joi.number().description('maxmind request daily limit').default(10),
  SMTP_PASSWORD: Joi.string().description('password for email server'),
  EMAIL_FROM: Joi.string().description('the from field in the emails sent by the app'),
  SMART_STREET_KEY: Joi.string().description('smart street key').default('14477575717190509'),
  SMART_STREET_AUTH_ID: Joi.string().description('smart street auth ud').default('1963a2f6-470c-96a9-b62e-6e16b34f9032'),
  SMART_STREET_AUTH_TOKEN: Joi.string().description('smart street auth token').default('SyN5kyNQ0zyPmA83vd6v'),
  SYNC_LOCATION_PULL_TIME: Joi.number().description('sync location pull time').default(2),
  SYNC_LOCATIONS_PULL_TIME: Joi.number().description('sync locations pull time').default(1),
  GOOGLE_CONSUMER_KEY: Joi.string().description('google oauth client id'),
  GOOGLE_CONSUMER_SECRET: Joi.string().description('google oauth secret'),
  GOOGLE_CALLBACK_URL: Joi.string().description('google oauth callback url'),
  EQUIPMENT_PER_PROVIDER: Joi.boolean().description('equipment per provider').default(true),
  SUBSCRIPTION_LEFT_EXPIRE_HOURS: Joi.number().description('subscription left expire hours').default(504),
  SUBSCRIPTION_LEFT_EXPIRE_HOURS_START: Joi.number().description('subscription left expire hours start').default(120),
  SUBSCRIPTION_INVOICE_GENERATE: Joi.bool().description('generate invoices or not').default(true),
  SUBSCRIPTION_PROCESS: Joi.bool().description('update subscription states').default(true),
  SUBSCRIPTION_CARDS_CHARGE: Joi.bool().description('charge from cards in requrring or not').default(false),
  SUBSCRIPTION_CARDS_HOURS: Joi.number().description('recurring subscription charge hours').default(24),
  SUBSCRIPTION_CARDS_RETRY: Joi.number().description('recurring subscription charge retry attempts').default(2),
  SUBSCRIPTION_SYNC_NOW: Joi.bool().description('on locaiton update fast sync to server or not').default(false),
  POSTALMETHODS_PROCESS: Joi.bool().description('process postal methods service to update state from.').default(false),
  CARDS_PROCESS: Joi.bool().description('update cards states in authorize').default(false),
  NOTIFICATIONS_PROCESS: Joi.bool().description('process notifications to generate from comments').default(false),
  CREDITS_PROCESS: Joi.bool().description('process credits to stop or do other actions').default(false),
  AUTHORIZE_PROCESS: Joi.bool().description('process authorize voides, statuses').default(true),
  CLOVER_PROCESS: Joi.bool().description('process clover voides, statuses').default(true),
  SHIPPINGS_PROCESS: Joi.bool().description('update shhippings states in easyship').default(false),
  CHECKEEPER_PROCESS: Joi.bool().description('update check states in checkeeper').default(false),
  INVOICES_PROCESS: Joi.bool().description('process bill invoices with statistics').default(true),
  POSTAL_SEND_INVOICES: Joi.bool().description('send postal invoices automaticaly').default(false),
  TWILIO_PROCESS: Joi.bool().description('process twilio sms checks').default(false),
  TELEGRAM_BOTS_PROCESS: Joi.bool().description('process telegram bots').default(false),
  TELEGRAM_POLLING: Joi.bool().description('polling on or off').default(true),
  TELEGRAM_WEBHOOKURL: Joi.string().description('webhook url'),
  PAYMENT_CARD_SYNC: Joi.bool().description('sync payment cards with gateway or not').default(true),
  SQUARE_PROD: Joi.bool().description('square prod or sandbox').default(false),
  AUTHORIZE_ENDPOINT: Joi.bool().description('authorize prod or sandbox').default(false),
  CLOVER_PROD: Joi.bool().description('clover prod or sandbox').default(false),
}).unknown();

module.exports = configSchema;
